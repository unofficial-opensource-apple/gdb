***************
*** 1,9 ****
  2003-01-21  Jim Ingham (jingham@apple.com)
  
          * varobj.h: declare new function varobj_is_fake_child.
          * varobj.c (varobj_is_fake_child): New function, does what it says.
  
- 2003-10-14  Jim Ingham (jingham@apple.com)
  
  	* utils.c (fprintf_symbol_filtered): If the language is objcplus,
  	then try both C++ demangling, and if that fails, try ObjC demangling.
--- 1,32 ----
+ 2003-02-03  Jim Ingham (jingham@apple.com)
+ 
+ 	* valops.c (hand_function_call): If you were passed in an
+ 	expected_type, remember to call check_typedef on it before
+ 	using it. 
+ 
+ 	* c-exp.y: For objc++ member data, look at the language
+ 	of the current function to determine whether to emit OP_THIS
+ 	or OP_OBJC_SELF.
+ 	* stack.c (frame_info): For objc++, try cplus_demangle AND
+ 	objc_demangle.
+ 	(get_frame_language): For objc++, report the function's language,
+ 	not the symtabs, since and objc++ file can be a mix of objc and
+ 	c++ functions.
+ 	* top.c (execute_command): Don't complain if the automatic language
+ 	is objc++, and you see the frame language is c++.  This is fine,
+ 	it just means we detected a c++ function.
+ 	* valops.c (value_of_this): For objc++ use the frame's language
+ 	to determine whether to hang the instance data off of "this" or
+ 	"self".  This last bit is kind of bogus, since we are just checking
+ 	what to do here, and then we have to redo the logic in c-exp.y when
+ 	we actually get around to emitting the opcodes.
+ 
  2003-01-21  Jim Ingham (jingham@apple.com)
  
          * varobj.h: declare new function varobj_is_fake_child.
          * varobj.c (varobj_is_fake_child): New function, does what it says.
  
+ 2003-01-14  Jim Ingham (jingham@apple.com)
  
  	* utils.c (fprintf_symbol_filtered): If the language is objcplus,
  	then try both C++ demangling, and if that fails, try ObjC demangling.
